# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    app.tempPath: '%env(default::APP_TEMP_PATH)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    doctrine.query_sql_command:
        class: Doctrine\DBAL\Tools\Console\Command\RunSqlCommand
        arguments:
            - '@Doctrine\Bundle\DoctrineBundle\Dbal\ManagerRegistryAwareConnectionProvider'
        tags:
            - { name: console.command, command: doctrine:query:sql }

    # Vendor services for autowiring
    GuzzleHttp\Client:
    GuzzleHttp\ClientInterface: '@GuzzleHttp\Client'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    App\Controller\ExportController:
        arguments:
            $enableCache: '%env(bool:APP_ENABLE_CACHE)%'

    App\Command\ExportCommand:
        arguments:
            $enableCache: '%env(bool:APP_ENABLE_CACHE)%'

    App\Command\QueueCommand:
        arguments:
            $enableStats: '%env(bool:APP_ENABLE_STATS)%'

    App\EpubCheck\EpubCheck:
        arguments:
            $epubCheckPath: '%env(string:EPUBCHECK_JAR)%'
        public: true

    App\Util\Api:
        arguments:
            $cacheTtl: '%env(int:APP_CACHE_TTL)%'

    App\Generator\ConvertGenerator:
        arguments:
            $timeout: '%env(default::int:APP_TIMEOUT)%'

    App\Repository\CreditRepository:
        public: true

    App\FileCache:
        arguments:
            $projectDir: '%kernel.project_dir%'

    App\EventSubscriber\RateLimitSubscriber:
        arguments:
            $rateLimit: '%env(int:APP_RATE_LIMIT)%'
            $rateDuration: '%env(int:APP_RATE_DURATION)%'

    App\BookStorage:
        arguments:
            $storageFs: '%env(string:APP_STORAGE_FS)%'
            $localFilesystem: '@local.storage'
            $s3Filesystem: '@s3.storage'
            $localStorageRoot: '%kernel.project_dir%/var/storage/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
